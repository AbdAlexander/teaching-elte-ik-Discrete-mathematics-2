︠09e854e6-429d-49ba-a8f9-2bdbfa4d8f4f︠
# gyak2

# 1

L = [1..10]
23 # print(23)
L # print(L)
L.append(12)
L
6 in L

︡67370d77-3943-45b0-bc7a-529f06ec387b︡{"stdout":"23\n"}︡{"stdout":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"}︡{"stdout":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]\n"}︡{"stdout":"True\n"}︡{"done":true}
︠e48d6bc4-caba-4591-bd94-903adc305aa7s︠


for i in [1..100]:
    print(i^3)

︡26a3a046-cd78-42bf-9d49-7b788b4798bd︡{"stdout":"1\n8\n27\n64\n125\n216\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n3375\n4096\n4913\n5832\n6859\n8000\n9261\n10648\n12167\n13824\n15625\n17576\n19683\n21952\n24389\n27000\n29791\n32768\n35937\n39304\n42875\n46656\n50653\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n117649\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n185193\n195112\n205379\n216000\n226981\n238328\n250047\n262144\n274625\n287496\n300763\n314432\n328509\n343000\n357911\n373248\n389017\n405224\n421875\n438976\n456533\n474552\n493039\n512000\n531441\n551368\n571787\n592704\n614125\n636056\n658503\n681472\n704969\n729000\n753571\n778688\n804357\n830584\n857375\n884736\n912673\n941192\n970299\n1000000\n"}︡{"done":true}
︠aae59c6d-c6af-45ac-9506-0fd90de912d3s︠


L2 = [] # L2 = list()
for i in [1..100]:
    L2.append(i^3)
print(L2)

︡24b4df18-87c1-43c7-8ce3-0e64d9deb7ac︡{"stdout":"[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 512000, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 729000, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299, 1000000]\n"}︡{"done":true}
︠5a99c40c-d29e-4b13-8e78-ea11033d83b0s︠

L3 = [i^3 for i in [1..100]]
print(L3)

︡894957d2-b33a-4363-975f-053d33e155e9︡{"stdout":"[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 512000, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 729000, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299, 1000000]\n"}︡{"done":true}
︠0998300f-bb3a-4b57-8abe-7919ae29f253︠

# 2

L = []
for i in [1..100]:
    if i % 3 == 0:
        L.append(i^3)

print(L)

# Python/Sage-ben az indentálással (behúzással) határozzuk meg a kódblokkokat

︡153d1dca-3db9-4e63-9853-946e11f3d2ed︡{"stderr":"Error in lines 2-4\nTraceback (most recent call last):\n  File \"/cocalc/lib/python2.7/site-packages/smc_sagews/sage_server.py\", line 1234, in execute\n    flags=compile_flags), namespace, locals)\n  File \"<string>\", line 3\n    L.append(i**Integer(3))\n    ^\nIndentationError: expected an indented block\n"}︡{"done":true}
︠49a0786d-f688-43dc-b330-b8ee9cb04376︠

L = [i^3 for i in [1..100] if i % 3 == 0]
print(L)

︡73ef4e6c-b029-433b-b429-5b6cf45e49ca︡{"stdout":"[27, 216, 729, 1728, 3375, 5832, 9261, 13824, 19683, 27000, 35937, 46656, 59319, 74088, 91125, 110592, 132651, 157464, 185193, 216000, 250047, 287496, 328509, 373248, 421875, 474552, 531441, 592704, 658503, 729000, 804357, 884736, 970299]\n"}︡{"done":true}
︠9270bd7e-387d-4811-9c65-711e9d95e21fs︠

# 3

H = {1, 2, 3}
H
H.add(5)
H
H.add(5)
H

H = set()
H
H.add(5)
H

︡1681c632-8098-4f14-b845-6d9f750df255︡{"stdout":"{1, 2, 3}\n"}︡{"stdout":"{1, 2, 3, 5}\n"}︡{"stdout":"{1, 2, 3, 5}\n"}︡{"stdout":"set()\n"}︡{"stdout":"{5}\n"}︡{"done":true}
︠ba3b9e91-f1b2-42ea-8dde-9ef8946b9afas︠

T = (1, 2, 10)
T[0]
T[1]
T[2]

︡6ae468ac-e2fb-4d80-9483-553a1ff6c97e︡{"stdout":"1\n"}︡{"stdout":"2\n"}︡{"stdout":"10\n"}︡{"done":true}
︠86744d6f-b608-44b7-8470-17cb178025d8s︠


def foo(x):
    return x+1


foo(10)
︡65e182d9-7342-4c08-9fce-11b73e60b724︡{"stdout":"11\n"}︡{"done":true}
︠4de5c183-1833-4b02-94fb-23f812c4f56e︠

def Is_Reflexive(X, R):
    for i in X:
        if (i, i) not in R:
            return False
    return True

Is_Reflexive({1, 2, 3}, [(1, 1), (1, 2), (2, 2)])

︡661a5673-2aaf-4218-826f-9dc9aeb0f388︡{"stdout":"False\n"}︡{"done":true}
︠da195393-904d-4e45-87d4-0756668b3df8︠

Is_Reflexive({1, 2, 3, 4}, [(1, 1), (2, 2), (3, 3), (4, 4)])

︡29b4ceef-9550-414c-ad22-b6e4523be4df︡{"stdout":"True\n"}︡{"done":true}
︠6e0ddd34-4dd1-4d99-84be-01314d0d3ae9︠

def Is_Transitive(X, R):
    for a in X:
        for b in X:
            for c in X:
                if (a, b) in R and (b, c) in R and (a, c) not in R:
                    return False
    return True

Is_Transitive({1, 2, 3}, [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3)])

︡b5cf7210-f83f-41a5-87cb-725af47c2dbd︡{"stdout":"True\n"}︡{"done":true}
︠d99e5fcc-f9ec-44bf-b6a5-30a390d4c94c︠

Is_Transitive({1, 2, 3, 4}, [(1, 2), (2, 3), (1, 4), (2, 2)])

︡e41c8093-d19c-4448-8462-523f0589406a︡{"stdout":"False\n"}︡{"done":true}
︠bb0d9677-4d3e-4a79-9db6-73e1b6cc72d4s︠

# 4

R = {(1, 2), (1, 3), (2, 5), (2, 7), (3, 10)}
H = {1, 2}

# image(H) visszatérési értéke: {2, 3, 5, 7}

def image(R, H):
    result = set()
    for i in R:
        if i[0] in H:
            result.add(i[1])
    return result

image(R, H)

︡a6c69727-d619-42c4-be66-e22bbc9bbbb1︡{"stdout":"{2, 3, 5, 7}\n"}︡{"done":true}
︠00fd4d0a-b958-4173-941f-a7b0d9eec952︠

def image(R, H):
    result = set()
    for (a, b) in R:
        if a in H:
            result.add(b)
    return result

image(R, H)

︡b45d4ec0-ce89-4bff-a7c7-24f94694d741︡{"stdout":"{2, 3, 5, 7}\n"}︡{"done":true}
︠b97cc6b6-7788-4108-9a1a-843f3f78f78b︠









